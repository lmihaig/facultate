Operatii de comunicare point-to-point
Fct: MPI_Send () si MPI_Recv()
MPI_Send
Prototipul acestei fct este urmatorul:

int MPI_Send(void *smessage, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm
comm);

smessage: specifica un buffer care contine elementele de date urmeaza sa fie transmise;
count: nr de elem care urmeaza a fi transmise
datatype: specifica tipul de date din buffer; toate datele au acelasi tip
dest: specifica rangul procesului care urmeaza sa primeasca datele
tag: o eticheta care permite destinatarului sa distinga intre diferitele mesaje de la aceeasi sursa
comm:specifica comunicatorul folosit in comunicare

Prototipul fct Recv

int MPI_Recv(void *rmessage, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm
comm, MPI_Status *status);

status: este o structura care specifica informatii despre mesaj, dupa incheierea operatiei de
comunicare (id_procesor send, cod de eroare);
rmessage: specifica bufferul in care se primesc datele
count: nr max de elemente care urmeaza sa fie primite;
datatype: tipul datelor care vor fi primite;
source: rangul procesului care trimite mesajul;
tag: eticheta pe care trebuie s-o aibe mesajul pentru a putea fi primit;
comm: comunicatorul folosit in comunicare;

Observatii:
Instructiunile MPI_Send si MPI_Recv sunt de tip blocking;
Marimea mesajului poate fi calculata inmultind numarul count cu numarul de octeti corespunzatori tipului datatype;
Tag-ul este un numar intreg;
Valoarea predefinita pt variabila source, MPI_ANY_SOURCE, se poate utiliza in cadrul functiei MPI_Recv, in cazul in care nodul sursa nu e cunoscut;
Valoarea predefinita pt variabila tag, MPI_ANY_TAG, specifica faptul ca un proces poate primi un mesaj, indiferent de eticheta.