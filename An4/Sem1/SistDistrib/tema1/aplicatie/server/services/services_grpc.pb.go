// protoc --go_out=. --go-grpc_out=. services.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: server/services.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Services_JumbleLettersFromArray_FullMethodName              = "/services.Services/JumbleLettersFromArray"
	Services_FindPerfectSquareCount_FullMethodName              = "/services.Services/FindPerfectSquareCount"
	Services_SumOfReversedIntegers_FullMethodName               = "/services.Services/SumOfReversedIntegers"
	Services_CalculateAverageWithinDigitSumRange_FullMethodName = "/services.Services/CalculateAverageWithinDigitSumRange"
	Services_ValidateAndConvertBinaryStrings_FullMethodName     = "/services.Services/ValidateAndConvertBinaryStrings"
	Services_ApplyCaesarCipher_FullMethodName                   = "/services.Services/ApplyCaesarCipher"
	Services_DecodeRunLengthEncodedText_FullMethodName          = "/services.Services/DecodeRunLengthEncodedText"
	Services_CountPrimeNumberDigits_FullMethodName              = "/services.Services/CountPrimeNumberDigits"
	Services_CountWordsWithEvenParityVowels_FullMethodName      = "/services.Services/CountWordsWithEvenParityVowels"
	Services_ComputeGreatestCommonDivisor_FullMethodName        = "/services.Services/ComputeGreatestCommonDivisor"
	Services_SumNumbersAfterRightPerm_FullMethodName            = "/services.Services/SumNumbersAfterRightPerm"
	Services_SumAfterDoublingFirstDigit_FullMethodName          = "/services.Services/SumAfterDoublingFirstDigit"
	Services_FilterComplexNumbersOutsideRange_FullMethodName    = "/services.Services/FilterComplexNumbersOutsideRange"
	Services_ValidatePotentialPasswords_FullMethodName          = "/services.Services/ValidatePotentialPasswords"
	Services_GenerateRandomPasswords_FullMethodName             = "/services.Services/GenerateRandomPasswords"
)

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	JumbleLettersFromArray(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
	FindPerfectSquareCount(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error)
	SumOfReversedIntegers(ctx context.Context, in *Int32ArrayRequest, opts ...grpc.CallOption) (*Int32Response, error)
	CalculateAverageWithinDigitSumRange(ctx context.Context, in *AverageWithinRangeRequest, opts ...grpc.CallOption) (*DoubleResponse, error)
	ValidateAndConvertBinaryStrings(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32ArrayResponse, error)
	ApplyCaesarCipher(ctx context.Context, in *CaesarCipherRequest, opts ...grpc.CallOption) (*SingleStringResponse, error)
	DecodeRunLengthEncodedText(ctx context.Context, in *SingleStringRequest, opts ...grpc.CallOption) (*SingleStringResponse, error)
	CountPrimeNumberDigits(ctx context.Context, in *UInt32ArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error)
	CountWordsWithEvenParityVowels(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error)
	ComputeGreatestCommonDivisor(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error)
	SumNumbersAfterRightPerm(ctx context.Context, in *RightShiftSumRequest, opts ...grpc.CallOption) (*Int32Response, error)
	SumAfterDoublingFirstDigit(ctx context.Context, in *Int32ArrayRequest, opts ...grpc.CallOption) (*Int32Response, error)
	FilterComplexNumbersOutsideRange(ctx context.Context, in *ComplexNumberRangeRequest, opts ...grpc.CallOption) (*Int32ArrayResponse, error)
	ValidatePotentialPasswords(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
	GenerateRandomPasswords(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) JumbleLettersFromArray(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, Services_JumbleLettersFromArray_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) FindPerfectSquareCount(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error) {
	out := new(UInt32Response)
	err := c.cc.Invoke(ctx, Services_FindPerfectSquareCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) SumOfReversedIntegers(ctx context.Context, in *Int32ArrayRequest, opts ...grpc.CallOption) (*Int32Response, error) {
	out := new(Int32Response)
	err := c.cc.Invoke(ctx, Services_SumOfReversedIntegers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) CalculateAverageWithinDigitSumRange(ctx context.Context, in *AverageWithinRangeRequest, opts ...grpc.CallOption) (*DoubleResponse, error) {
	out := new(DoubleResponse)
	err := c.cc.Invoke(ctx, Services_CalculateAverageWithinDigitSumRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ValidateAndConvertBinaryStrings(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32ArrayResponse, error) {
	out := new(UInt32ArrayResponse)
	err := c.cc.Invoke(ctx, Services_ValidateAndConvertBinaryStrings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ApplyCaesarCipher(ctx context.Context, in *CaesarCipherRequest, opts ...grpc.CallOption) (*SingleStringResponse, error) {
	out := new(SingleStringResponse)
	err := c.cc.Invoke(ctx, Services_ApplyCaesarCipher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) DecodeRunLengthEncodedText(ctx context.Context, in *SingleStringRequest, opts ...grpc.CallOption) (*SingleStringResponse, error) {
	out := new(SingleStringResponse)
	err := c.cc.Invoke(ctx, Services_DecodeRunLengthEncodedText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) CountPrimeNumberDigits(ctx context.Context, in *UInt32ArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error) {
	out := new(UInt32Response)
	err := c.cc.Invoke(ctx, Services_CountPrimeNumberDigits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) CountWordsWithEvenParityVowels(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error) {
	out := new(UInt32Response)
	err := c.cc.Invoke(ctx, Services_CountWordsWithEvenParityVowels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ComputeGreatestCommonDivisor(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*UInt32Response, error) {
	out := new(UInt32Response)
	err := c.cc.Invoke(ctx, Services_ComputeGreatestCommonDivisor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) SumNumbersAfterRightPerm(ctx context.Context, in *RightShiftSumRequest, opts ...grpc.CallOption) (*Int32Response, error) {
	out := new(Int32Response)
	err := c.cc.Invoke(ctx, Services_SumNumbersAfterRightPerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) SumAfterDoublingFirstDigit(ctx context.Context, in *Int32ArrayRequest, opts ...grpc.CallOption) (*Int32Response, error) {
	out := new(Int32Response)
	err := c.cc.Invoke(ctx, Services_SumAfterDoublingFirstDigit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) FilterComplexNumbersOutsideRange(ctx context.Context, in *ComplexNumberRangeRequest, opts ...grpc.CallOption) (*Int32ArrayResponse, error) {
	out := new(Int32ArrayResponse)
	err := c.cc.Invoke(ctx, Services_FilterComplexNumbersOutsideRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ValidatePotentialPasswords(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, Services_ValidatePotentialPasswords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) GenerateRandomPasswords(ctx context.Context, in *StringArrayRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, Services_GenerateRandomPasswords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	JumbleLettersFromArray(context.Context, *StringArrayRequest) (*StringArrayResponse, error)
	FindPerfectSquareCount(context.Context, *StringArrayRequest) (*UInt32Response, error)
	SumOfReversedIntegers(context.Context, *Int32ArrayRequest) (*Int32Response, error)
	CalculateAverageWithinDigitSumRange(context.Context, *AverageWithinRangeRequest) (*DoubleResponse, error)
	ValidateAndConvertBinaryStrings(context.Context, *StringArrayRequest) (*UInt32ArrayResponse, error)
	ApplyCaesarCipher(context.Context, *CaesarCipherRequest) (*SingleStringResponse, error)
	DecodeRunLengthEncodedText(context.Context, *SingleStringRequest) (*SingleStringResponse, error)
	CountPrimeNumberDigits(context.Context, *UInt32ArrayRequest) (*UInt32Response, error)
	CountWordsWithEvenParityVowels(context.Context, *StringArrayRequest) (*UInt32Response, error)
	ComputeGreatestCommonDivisor(context.Context, *StringArrayRequest) (*UInt32Response, error)
	SumNumbersAfterRightPerm(context.Context, *RightShiftSumRequest) (*Int32Response, error)
	SumAfterDoublingFirstDigit(context.Context, *Int32ArrayRequest) (*Int32Response, error)
	FilterComplexNumbersOutsideRange(context.Context, *ComplexNumberRangeRequest) (*Int32ArrayResponse, error)
	ValidatePotentialPasswords(context.Context, *StringArrayRequest) (*StringArrayResponse, error)
	GenerateRandomPasswords(context.Context, *StringArrayRequest) (*StringArrayResponse, error)
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) JumbleLettersFromArray(context.Context, *StringArrayRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JumbleLettersFromArray not implemented")
}
func (UnimplementedServicesServer) FindPerfectSquareCount(context.Context, *StringArrayRequest) (*UInt32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPerfectSquareCount not implemented")
}
func (UnimplementedServicesServer) SumOfReversedIntegers(context.Context, *Int32ArrayRequest) (*Int32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumOfReversedIntegers not implemented")
}
func (UnimplementedServicesServer) CalculateAverageWithinDigitSumRange(context.Context, *AverageWithinRangeRequest) (*DoubleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateAverageWithinDigitSumRange not implemented")
}
func (UnimplementedServicesServer) ValidateAndConvertBinaryStrings(context.Context, *StringArrayRequest) (*UInt32ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndConvertBinaryStrings not implemented")
}
func (UnimplementedServicesServer) ApplyCaesarCipher(context.Context, *CaesarCipherRequest) (*SingleStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCaesarCipher not implemented")
}
func (UnimplementedServicesServer) DecodeRunLengthEncodedText(context.Context, *SingleStringRequest) (*SingleStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeRunLengthEncodedText not implemented")
}
func (UnimplementedServicesServer) CountPrimeNumberDigits(context.Context, *UInt32ArrayRequest) (*UInt32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPrimeNumberDigits not implemented")
}
func (UnimplementedServicesServer) CountWordsWithEvenParityVowels(context.Context, *StringArrayRequest) (*UInt32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountWordsWithEvenParityVowels not implemented")
}
func (UnimplementedServicesServer) ComputeGreatestCommonDivisor(context.Context, *StringArrayRequest) (*UInt32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeGreatestCommonDivisor not implemented")
}
func (UnimplementedServicesServer) SumNumbersAfterRightPerm(context.Context, *RightShiftSumRequest) (*Int32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumNumbersAfterRightPerm not implemented")
}
func (UnimplementedServicesServer) SumAfterDoublingFirstDigit(context.Context, *Int32ArrayRequest) (*Int32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumAfterDoublingFirstDigit not implemented")
}
func (UnimplementedServicesServer) FilterComplexNumbersOutsideRange(context.Context, *ComplexNumberRangeRequest) (*Int32ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterComplexNumbersOutsideRange not implemented")
}
func (UnimplementedServicesServer) ValidatePotentialPasswords(context.Context, *StringArrayRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePotentialPasswords not implemented")
}
func (UnimplementedServicesServer) GenerateRandomPasswords(context.Context, *StringArrayRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRandomPasswords not implemented")
}
func (UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_JumbleLettersFromArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).JumbleLettersFromArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_JumbleLettersFromArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).JumbleLettersFromArray(ctx, req.(*StringArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_FindPerfectSquareCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).FindPerfectSquareCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_FindPerfectSquareCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).FindPerfectSquareCount(ctx, req.(*StringArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_SumOfReversedIntegers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32ArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).SumOfReversedIntegers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_SumOfReversedIntegers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).SumOfReversedIntegers(ctx, req.(*Int32ArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_CalculateAverageWithinDigitSumRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AverageWithinRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).CalculateAverageWithinDigitSumRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_CalculateAverageWithinDigitSumRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).CalculateAverageWithinDigitSumRange(ctx, req.(*AverageWithinRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ValidateAndConvertBinaryStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ValidateAndConvertBinaryStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_ValidateAndConvertBinaryStrings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ValidateAndConvertBinaryStrings(ctx, req.(*StringArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ApplyCaesarCipher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaesarCipherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ApplyCaesarCipher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_ApplyCaesarCipher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ApplyCaesarCipher(ctx, req.(*CaesarCipherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_DecodeRunLengthEncodedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).DecodeRunLengthEncodedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_DecodeRunLengthEncodedText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).DecodeRunLengthEncodedText(ctx, req.(*SingleStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_CountPrimeNumberDigits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt32ArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).CountPrimeNumberDigits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_CountPrimeNumberDigits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).CountPrimeNumberDigits(ctx, req.(*UInt32ArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_CountWordsWithEvenParityVowels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).CountWordsWithEvenParityVowels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_CountWordsWithEvenParityVowels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).CountWordsWithEvenParityVowels(ctx, req.(*StringArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ComputeGreatestCommonDivisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ComputeGreatestCommonDivisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_ComputeGreatestCommonDivisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ComputeGreatestCommonDivisor(ctx, req.(*StringArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_SumNumbersAfterRightPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RightShiftSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).SumNumbersAfterRightPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_SumNumbersAfterRightPerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).SumNumbersAfterRightPerm(ctx, req.(*RightShiftSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_SumAfterDoublingFirstDigit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32ArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).SumAfterDoublingFirstDigit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_SumAfterDoublingFirstDigit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).SumAfterDoublingFirstDigit(ctx, req.(*Int32ArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_FilterComplexNumbersOutsideRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplexNumberRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).FilterComplexNumbersOutsideRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_FilterComplexNumbersOutsideRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).FilterComplexNumbersOutsideRange(ctx, req.(*ComplexNumberRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ValidatePotentialPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ValidatePotentialPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_ValidatePotentialPasswords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ValidatePotentialPasswords(ctx, req.(*StringArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_GenerateRandomPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).GenerateRandomPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_GenerateRandomPasswords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).GenerateRandomPasswords(ctx, req.(*StringArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JumbleLettersFromArray",
			Handler:    _Services_JumbleLettersFromArray_Handler,
		},
		{
			MethodName: "FindPerfectSquareCount",
			Handler:    _Services_FindPerfectSquareCount_Handler,
		},
		{
			MethodName: "SumOfReversedIntegers",
			Handler:    _Services_SumOfReversedIntegers_Handler,
		},
		{
			MethodName: "CalculateAverageWithinDigitSumRange",
			Handler:    _Services_CalculateAverageWithinDigitSumRange_Handler,
		},
		{
			MethodName: "ValidateAndConvertBinaryStrings",
			Handler:    _Services_ValidateAndConvertBinaryStrings_Handler,
		},
		{
			MethodName: "ApplyCaesarCipher",
			Handler:    _Services_ApplyCaesarCipher_Handler,
		},
		{
			MethodName: "DecodeRunLengthEncodedText",
			Handler:    _Services_DecodeRunLengthEncodedText_Handler,
		},
		{
			MethodName: "CountPrimeNumberDigits",
			Handler:    _Services_CountPrimeNumberDigits_Handler,
		},
		{
			MethodName: "CountWordsWithEvenParityVowels",
			Handler:    _Services_CountWordsWithEvenParityVowels_Handler,
		},
		{
			MethodName: "ComputeGreatestCommonDivisor",
			Handler:    _Services_ComputeGreatestCommonDivisor_Handler,
		},
		{
			MethodName: "SumNumbersAfterRightPerm",
			Handler:    _Services_SumNumbersAfterRightPerm_Handler,
		},
		{
			MethodName: "SumAfterDoublingFirstDigit",
			Handler:    _Services_SumAfterDoublingFirstDigit_Handler,
		},
		{
			MethodName: "FilterComplexNumbersOutsideRange",
			Handler:    _Services_FilterComplexNumbersOutsideRange_Handler,
		},
		{
			MethodName: "ValidatePotentialPasswords",
			Handler:    _Services_ValidatePotentialPasswords_Handler,
		},
		{
			MethodName: "GenerateRandomPasswords",
			Handler:    _Services_GenerateRandomPasswords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/services.proto",
}
